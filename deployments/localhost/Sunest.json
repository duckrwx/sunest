{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "country",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "city",
          "type": "string"
        }
      ],
      "name": "MicrogridRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "NodeDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "microgridHash",
          "type": "bytes32"
        }
      ],
      "name": "NodeRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "oldHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newHash",
          "type": "bytes32"
        }
      ],
      "name": "NodeSwitched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kWh",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SensorDataSubmitted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMicrogridHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allNodeOperators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "getMicrogridInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "walletMetamask",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerOp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "country",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "city",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "latestKWh",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "capacityGB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "latestSensor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "kWh",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct Sunest.SensorRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listMicrogrids",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "microgridByHash",
      "outputs": [
        {
          "internalType": "address",
          "name": "walletMetamask",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "energyPricePerOp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "country",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "city",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "country",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "city",
          "type": "string"
        }
      ],
      "name": "microgridsByLocation",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "hashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "wallets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "latestKWh",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "microgridsByLocationHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nodeByOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "currentMicrogridHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "country",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "city",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "storedGB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poe",
      "outputs": [
        {
          "internalType": "contract ProofOfExistence",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletMetamask",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_energyPricePerOp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_country",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_city",
          "type": "string"
        }
      ],
      "name": "registerMicrogrid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "microgridHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "country",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "city",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "initialGB",
          "type": "uint256"
        }
      ],
      "name": "registerNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sensorHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "kWh",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "kWh",
          "type": "uint256"
        }
      ],
      "name": "submitSensorData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "switchIfNeeded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf058f29ccc5303519f39d13780a825b06ffb7b47df2ff8a737c95f953534322",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2608431",
    "logsBloom": "0x
    "blockHash": "0xf3f0fe7db22114ab7c8c8498705af012b5ef4ac0df25dca37239a7f9ce69a0d6",
    "transactionHash": "0xcf058f29ccc5303519f39d13780a825b06ffb7b47df2ff8a737c95f953534322",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "2608431",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "6c3ed4cdbb722ba9d23d13f2e9bf33c3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"city\",\"type\":\"string\"}],\"name\":\"MicrogridRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NodeDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"microgridHash\",\"type\":\"bytes32\"}],\"name\":\"NodeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oldHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"}],\"name\":\"NodeSwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kWh\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SensorDataSubmitted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMicrogridHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allNodeOperators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getMicrogridInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"walletMetamask\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerOp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"city\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"latestKWh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacityGB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"latestSensor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"kWh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Sunest.SensorRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMicrogrids\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"microgridByHash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"walletMetamask\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"energyPricePerOp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"city\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"city\",\"type\":\"string\"}],\"name\":\"microgridsByLocation\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"latestKWh\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"microgridsByLocationHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeByOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"currentMicrogridHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"city\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"storedGB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poe\",\"outputs\":[{\"internalType\":\"contract ProofOfExistence\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletMetamask\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_energyPricePerOp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_country\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_city\",\"type\":\"string\"}],\"name\":\"registerMicrogrid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"microgridHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"city\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialGB\",\"type\":\"uint256\"}],\"name\":\"registerNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sensorHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"kWh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"kWh\",\"type\":\"uint256\"}],\"name\":\"submitSensorData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchIfNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getMicrogridInfo(bytes32)\":{\"params\":{\"hash\":\"O hash da microgrid.\"},\"returns\":{\"active\":\"Status da microgrid.\",\"capacityGB\":\"Capacidade de processamento equivalente em GB.\",\"city\":\"Cidade de localiza\\u00e7\\u00e3o.\",\"country\":\"Pa\\u00eds de localiza\\u00e7\\u00e3o.\",\"latestKWh\":\"\\u00daltima leitura de energia.\",\"pricePerOp\":\"Pre\\u00e7o da energia.\",\"walletMetamask\":\"Endere\\u00e7o da carteira do operador.\"}},\"latestSensor(bytes32)\":{\"params\":{\"hash\":\"O hash da microgrid.\"},\"returns\":{\"_0\":\"SensorRecord O \\u00faltimo registro de energia.\"}},\"listMicrogrids()\":{\"details\":\"\\u00datil para aplica\\u00e7\\u00f5es externas descobrirem todas as microgrids.\"},\"microgridsByLocation(string,string)\":{\"details\":\"Fun\\u00e7\\u00e3o otimizada que busca por um \\u00edndice de localiza\\u00e7\\u00e3o, economizando g\\u00e1s.\",\"returns\":{\"hashes\":\"Array com os hashes das microgrids.\",\"latestKWh\":\"Array com a \\u00faltima leitura de kWh de cada microgrid.\",\"prices\":\"Array com os pre\\u00e7os de energia.\",\"wallets\":\"Array com as carteiras das microgrids.\"}},\"registerMicrogrid(address,uint256,string,string)\":{\"details\":\"Gera um hash \\u00fanico para a microgrid e a indexa por localiza\\u00e7\\u00e3o para buscas futuras.\",\"params\":{\"_city\":\"A cidade onde a microgrid est\\u00e1 localizada.\",\"_country\":\"O pa\\u00eds onde a microgrid est\\u00e1 localizada.\",\"_energyPricePerOp\":\"O pre\\u00e7o da energia por opera\\u00e7\\u00e3o.\",\"_walletMetamask\":\"O endere\\u00e7o da carteira do operador da microgrid.\"}},\"registerNode(bytes32,string,string,uint256)\":{\"params\":{\"city\":\"A cidade onde o n\\u00f3 est\\u00e1 operando.\",\"country\":\"O pa\\u00eds onde o n\\u00f3 est\\u00e1 operando.\",\"initialGB\":\"A capacidade de armazenamento/processamento do n\\u00f3.\",\"microgridHash\":\"O hash da microgrid inicial \\u00e0 qual o n\\u00f3 se conectar\\u00e1.\"}},\"submitSensorData(bytes32,uint256)\":{\"details\":\"Apenas o dono do registro ou a carteira da microgrid podem enviar dados.\",\"params\":{\"hash\":\"O hash da microgrid.\",\"kWh\":\"A quantidade de energia gerada em kWh.\"}},\"switchIfNeeded()\":{\"details\":\"Se nenhuma microgrid adequada for encontrada, o n\\u00f3 \\u00e9 desativado.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getMicrogridInfo(bytes32)\":{\"notice\":\"Retorna informa\\u00e7\\u00f5es detalhadas sobre uma microgrid espec\\u00edfica.\"},\"latestSensor(bytes32)\":{\"notice\":\"Retorna o registro mais recente de um sensor de uma microgrid.\"},\"listMicrogrids()\":{\"notice\":\"Retorna uma lista com os hashes de todas as microgrids registradas.\"},\"microgridsByLocation(string,string)\":{\"notice\":\"Retorna uma lista de microgrids ativas em uma determinada localiza\\u00e7\\u00e3o.\"},\"registerMicrogrid(address,uint256,string,string)\":{\"notice\":\"Registra uma nova microgrid no sistema.\"},\"registerNode(bytes32,string,string,uint256)\":{\"notice\":\"Registra um novo n\\u00f3 consumidor de energia.\"},\"submitSensorData(bytes32,uint256)\":{\"notice\":\"Envia dados de gera\\u00e7\\u00e3o de energia de um sensor.\"},\"switchIfNeeded()\":{\"notice\":\"Verifica a energia da microgrid atual e, se abaixo de um limiar, troca para a melhor dispon\\u00edvel na mesma cidade.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sunest.sol\":\"Sunest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProofOfExistence.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ncontract ProofOfExistence {\\n  mapping(bytes32 => address) public files;\\n  mapping(address => bytes32[]) public users;\\n\\n  event Claimed(address indexed owner, bytes32 indexed file);\\n  event Forfeited(address indexed owner, bytes32 indexed file);\\n\\n  error NotFileOwner();\\n  error FileAlreadyClaimed();\\n\\n  modifier isOwner(bytes32 hash) {\\n    address from = msg.sender;\\n    if (files[hash] != from) revert NotFileOwner();\\n    _;\\n  }\\n\\n  modifier notClaimed(bytes32 hash) {\\n    address from = msg.sender;\\n    if (files[hash] != address(0)) revert FileAlreadyClaimed();\\n    _;\\n  }\\n\\n  function hasClaimed(bytes32 hash) public view returns (bool) {\\n    address owner = files[hash];\\n    return (owner != address(0));\\n  }\\n\\n  function ownedFiles() public view returns (bytes32[] memory) {\\n    address from = msg.sender;\\n    return users[from];\\n  }\\n\\n  function claim(bytes32 hash) public notClaimed(hash) returns (bool) {\\n    address from = msg.sender;\\n\\n    // update storage files\\n    files[hash] = from;\\n\\n    // update storage users\\n    bytes32[] storage userFiles = users[from];\\n    userFiles.push(hash);\\n\\n    emit Claimed(from, hash);\\n    return true;\\n  }\\n\\n  function forfeit(bytes32 hash) public isOwner(hash) returns (bool) {\\n    address from = msg.sender;\\n\\n    // update storage files\\n    delete files[hash];\\n\\n    // locate the index of the file going to be deleted.\\n    bytes32[] storage userFiles = users[from];\\n    uint32 delIdx = 0;\\n    for (uint32 i = 0; i < userFiles.length; i++) {\\n      if (userFiles[i] == hash) {\\n        delIdx = i;\\n        break;\\n      }\\n    }\\n    // update storage users by swap-delete\\n    if (delIdx != userFiles.length - 1) {\\n      userFiles[delIdx] = userFiles[userFiles.length - 1];\\n    }\\n    // delete\\n    userFiles.pop();\\n\\n    emit Forfeited(from, hash);\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x197a56e0682c3a423c1dcd6093f44aeae72d4ba780f364eb2609b5c68b9ee806\",\"license\":\"UNLICENSED\"},\"contracts/Sunest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Sunest\\n * @notice Contrato para registrar e gerenciar microgrids de energia solar e n\\u00f3s consumidores.\\n * @dev Vers\\u00e3o otimizada com busca de microgrids por localiza\\u00e7\\u00e3o para maior efici\\u00eancia de g\\u00e1s.\\n */\\n\\nimport \\\"./ProofOfExistence.sol\\\";\\n\\ncontract Sunest {\\n    /*\\u2013\\u2013\\u2013\\u2013\\u2013 CONSTANTES \\u2013\\u2013\\u2013\\u2013\\u2013*/\\n    uint256 private constant KWH_PER_GB = 5;      // 5 kWh equivalem a 1 GB de capacidade de processamento/armazenamento.\\n    uint256 private constant THRESHOLD_PCT = 30;  // Porcentagem m\\u00ednima de energia necess\\u00e1ria antes de um n\\u00f3 precisar trocar de microgrid.\\n\\n    /*\\u2013\\u2013\\u2013\\u2013\\u2013 REFER\\u00caNCIA A OUTROS CONTRATOS \\u2013\\u2013\\u2013\\u2013\\u2013*/\\n    ProofOfExistence public poe;\\n\\n    /*\\u2013\\u2013\\u2013\\u2013\\u2013 STRUCTS \\u2013\\u2013\\u2013\\u2013\\u2013*/\\n\\n    struct Microgrid {\\n        address walletMetamask;   // Endere\\u00e7o da carteira do operador da microgrid.\\n        uint256 energyPricePerOp; // Pre\\u00e7o da energia.\\n        string  country;          // Pa\\u00eds da microgrid.\\n        string  city;             // Cidade da microgrid.\\n        bool    isActive;         // Status da microgrid.\\n        address owner;            // Dono do registro no contrato.\\n    }\\n\\n    struct SensorRecord {\\n        uint256 kWh;              // Energia gerada (em kWh).\\n        uint256 timestamp;        // Timestamp do registro.\\n    }\\n\\n    struct Node {\\n        address operator;             // Endere\\u00e7o do operador do n\\u00f3.\\n        bytes32 currentMicrogridHash; // Hash da microgrid \\u00e0 qual o n\\u00f3 est\\u00e1 conectado.\\n        bool    isActive;             // Status do n\\u00f3.\\n        string  country;              // Pa\\u00eds do n\\u00f3.\\n        string  city;                 // Cidade do n\\u00f3.\\n        uint256 storedGB;             // Capacidade de armazenamento/processamento do n\\u00f3 em GB.\\n    }\\n\\n    /*\\u2013\\u2013\\u2013\\u2013\\u2013 VARI\\u00c1VEIS DE ESTADO (STORAGE) \\u2013\\u2013\\u2013\\u2013\\u2013*/\\n\\n    // Mapeamentos prim\\u00e1rios para acesso direto por hash ou endere\\u00e7o.\\n    mapping(bytes32 => Microgrid) public microgridByHash;\\n    mapping(bytes32 => SensorRecord[]) public sensorHistory;\\n    mapping(address => Node) public nodeByOperator;\\n\\n    // Listas para itera\\u00e7\\u00e3o e descoberta.\\n    bytes32[] public allMicrogridHashes;\\n    address[] public allNodeOperators;\\n\\n    // OTIMIZA\\u00c7\\u00c3O: Mapeamento para buscar microgrids por localiza\\u00e7\\u00e3o de forma eficiente.\\n    mapping(bytes32 => bytes32[]) public microgridsByLocationHash;\\n\\n    /*\\u2013\\u2013\\u2013\\u2013\\u2013 EVENTOS \\u2013\\u2013\\u2013\\u2013\\u2013*/\\n\\n    event MicrogridRegistered(bytes32 indexed hash, address indexed owner, string country, string city);\\n    event SensorDataSubmitted(bytes32 indexed hash, uint256 kWh, uint256 timestamp);\\n    event NodeRegistered(address indexed operator, bytes32 indexed microgridHash);\\n    event NodeSwitched(address indexed operator, bytes32 oldHash, bytes32 newHash);\\n    event NodeDeactivated(address indexed operator);\\n\\n    /*\\u2013\\u2013\\u2013\\u2013\\u2013 CONSTRUTOR \\u2013\\u2013\\u2013\\u2013\\u2013*/\\n\\n    constructor(address _poeAddress) {\\n        poe = ProofOfExistence(_poeAddress);\\n    }\\n\\n    /*\\u2013\\u2013\\u2013\\u2013\\u2013 FUN\\u00c7\\u00d5ES DE MICROGRID \\u2013\\u2013\\u2013\\u2013\\u2013*/\\n\\n    /**\\n     * @notice Registra uma nova microgrid no sistema.\\n     * @dev Gera um hash \\u00fanico para a microgrid e a indexa por localiza\\u00e7\\u00e3o para buscas futuras.\\n     * @param _walletMetamask O endere\\u00e7o da carteira do operador da microgrid.\\n     * @param _energyPricePerOp O pre\\u00e7o da energia por opera\\u00e7\\u00e3o.\\n     * @param _country O pa\\u00eds onde a microgrid est\\u00e1 localizada.\\n     * @param _city A cidade onde a microgrid est\\u00e1 localizada.\\n     */\\n    function registerMicrogrid(\\n        address _walletMetamask,\\n        uint256 _energyPricePerOp,\\n        string memory _country,\\n        string memory _city\\n    ) external {\\n        bytes32 hash = keccak256(abi.encodePacked(_walletMetamask, _country, _city));\\n        require(microgridByHash[hash].owner == address(0), \\\"Microgrid: Ja registrada\\\");\\n\\n        microgridByHash[hash] = Microgrid({\\n            walletMetamask:   _walletMetamask,\\n            energyPricePerOp: _energyPricePerOp,\\n            country:          _country,\\n            city:             _city,\\n            isActive:         true,\\n            owner:            msg.sender\\n        });\\n        allMicrogridHashes.push(hash);\\n\\n        // OTIMIZA\\u00c7\\u00c3O: Indexa a microgrid pela sua localiza\\u00e7\\u00e3o.\\n        bytes32 locationHash = keccak256(abi.encodePacked(_country, _city));\\n        microgridsByLocationHash[locationHash].push(hash);\\n\\n        emit MicrogridRegistered(hash, msg.sender, _country, _city);\\n    }\\n\\n    /**\\n     * @notice Envia dados de gera\\u00e7\\u00e3o de energia de um sensor.\\n     * @dev Apenas o dono do registro ou a carteira da microgrid podem enviar dados.\\n     * @param hash O hash da microgrid.\\n     * @param kWh A quantidade de energia gerada em kWh.\\n     */\\n    function submitSensorData(bytes32 hash, uint256 kWh) external {\\n        Microgrid storage mg = microgridByHash[hash];\\n        require(mg.isActive, \\\"Microgrid: Inativa\\\");\\n        require(msg.sender == mg.owner || msg.sender == mg.walletMetamask, \\\"Microgrid: Nao autorizado\\\");\\n        require(kWh > 0, \\\"Sensor: kWh deve ser maior que 0\\\");\\n\\n        sensorHistory[hash].push(SensorRecord(kWh, block.timestamp));\\n        emit SensorDataSubmitted(hash, kWh, block.timestamp);\\n    }\\n\\n    /*\\u2013\\u2013\\u2013\\u2013\\u2013 FUN\\u00c7\\u00d5ES DE N\\u00d3 \\u2013\\u2013\\u2013\\u2013\\u2013*/\\n\\n    /**\\n     * @notice Registra um novo n\\u00f3 consumidor de energia.\\n     * @param microgridHash O hash da microgrid inicial \\u00e0 qual o n\\u00f3 se conectar\\u00e1.\\n     * @param country O pa\\u00eds onde o n\\u00f3 est\\u00e1 operando.\\n     * @param city A cidade onde o n\\u00f3 est\\u00e1 operando.\\n     * @param initialGB A capacidade de armazenamento/processamento do n\\u00f3.\\n     */\\n    function registerNode(\\n        bytes32 microgridHash,\\n        string  memory country,\\n        string  memory city,\\n        uint256 initialGB\\n    ) external {\\n        require(nodeByOperator[msg.sender].operator == address(0), \\\"Node: Ja existe\\\");\\n        require(microgridByHash[microgridHash].isActive, \\\"Node: Microgrid inicial inativa\\\");\\n\\n        nodeByOperator[msg.sender] = Node({\\n            operator:             msg.sender,\\n            currentMicrogridHash: microgridHash,\\n            isActive:             true,\\n            country:              country,\\n            city:                 city,\\n            storedGB:             initialGB\\n        });\\n        allNodeOperators.push(msg.sender);\\n        emit NodeRegistered(msg.sender, microgridHash);\\n    }\\n\\n    /**\\n     * @notice Verifica a energia da microgrid atual e, se abaixo de um limiar, troca para a melhor dispon\\u00edvel na mesma cidade.\\n     * @dev Se nenhuma microgrid adequada for encontrada, o n\\u00f3 \\u00e9 desativado.\\n     */\\n    function switchIfNeeded() external {\\n        Node storage nd = nodeByOperator[msg.sender];\\n        require(nd.isActive, \\\"Node: Inativo\\\");\\n\\n        uint256 requiredKWh = nd.storedGB * KWH_PER_GB;\\n        uint256 currentKWh = latestSensor(nd.currentMicrogridHash).kWh;\\n\\n        if (currentKWh * 100 < requiredKWh * THRESHOLD_PCT) {\\n            bytes32 locationHash = keccak256(abi.encodePacked(nd.country, nd.city));\\n            bytes32[] storage candidates = microgridsByLocationHash[locationHash];\\n\\n            bytes32 bestAlternative;\\n            uint256 maxKWh = 0;\\n\\n            // Loop otimizado: busca apenas nas microgrids da mesma cidade.\\n            for (uint i = 0; i < candidates.length; i++) {\\n                bytes32 candidateHash = candidates[i];\\n                if (candidateHash == nd.currentMicrogridHash || !microgridByHash[candidateHash].isActive) {\\n                    continue;\\n                }\\n\\n                uint candidateKWh = latestSensor(candidateHash).kWh;\\n                // Procura pela microgrid com mais energia, desde que atenda ao requisito.\\n                if (candidateKWh >= requiredKWh && candidateKWh > maxKWh) {\\n                    bestAlternative = candidateHash;\\n                    maxKWh = candidateKWh;\\n                }\\n            }\\n\\n            if (bestAlternative != bytes32(0)) {\\n                emit NodeSwitched(msg.sender, nd.currentMicrogridHash, bestAlternative);\\n                nd.currentMicrogridHash = bestAlternative;\\n            } else {\\n                nd.isActive = false;\\n                emit NodeDeactivated(msg.sender);\\n            }\\n        }\\n    }\\n\\n    /*\\u2013\\u2013\\u2013\\u2013\\u2013 FUN\\u00c7\\u00d5ES DE LEITURA (VIEW) \\u2013\\u2013\\u2013\\u2013\\u2013*/\\n\\n    /**\\n     * @notice Retorna o registro mais recente de um sensor de uma microgrid.\\n     * @param hash O hash da microgrid.\\n     * @return SensorRecord O \\u00faltimo registro de energia.\\n     */\\n    function latestSensor(bytes32 hash) public view returns (SensorRecord memory) {\\n        uint len = sensorHistory[hash].length;\\n        if (len == 0) return SensorRecord(0, 0);\\n        return sensorHistory[hash][len - 1];\\n    }\\n\\n    /**\\n     * @notice Retorna uma lista de microgrids ativas em uma determinada localiza\\u00e7\\u00e3o.\\n     * @dev Fun\\u00e7\\u00e3o otimizada que busca por um \\u00edndice de localiza\\u00e7\\u00e3o, economizando g\\u00e1s.\\n     * @return hashes Array com os hashes das microgrids.\\n     * @return wallets Array com as carteiras das microgrids.\\n     * @return prices Array com os pre\\u00e7os de energia.\\n     * @return latestKWh Array com a \\u00faltima leitura de kWh de cada microgrid.\\n     */\\n    function microgridsByLocation(string calldata country, string calldata city)\\n        external\\n        view\\n        returns (\\n            bytes32[] memory hashes,\\n            address[] memory wallets,\\n            uint256[] memory prices,\\n            uint256[] memory latestKWh\\n        )\\n    {\\n        bytes32 locationHash = keccak256(abi.encodePacked(country, city));\\n        bytes32[] storage hashesInLocation = microgridsByLocationHash[locationHash];\\n        \\n        uint count = hashesInLocation.length;\\n        hashes    = new bytes32[](count);\\n        wallets   = new address[](count);\\n        prices    = new uint256[](count);\\n        latestKWh = new uint256[](count);\\n\\n        for (uint i = 0; i < count; i++) {\\n            bytes32 h = hashesInLocation[i];\\n            Microgrid storage mg = microgridByHash[h];\\n            \\n            hashes[i]    = h;\\n            wallets[i]   = mg.walletMetamask;\\n            prices[i]    = mg.energyPricePerOp;\\n            latestKWh[i] = latestSensor(h).kWh;\\n        }\\n    }\\n\\t/**\\n \\t * @notice Retorna uma lista com os hashes de todas as microgrids registradas.\\n \\t * @dev \\u00datil para aplica\\u00e7\\u00f5es externas descobrirem todas as microgrids.\\n \\t */\\n\\tfunction listMicrogrids() external view returns (bytes32[] memory) {\\n    \\treturn allMicrogridHashes;\\n\\t}\\n\\n    /**\\n     * @notice Retorna informa\\u00e7\\u00f5es detalhadas sobre uma microgrid espec\\u00edfica.\\n     * @param hash O hash da microgrid.\\n     * @return walletMetamask Endere\\u00e7o da carteira do operador.\\n     * @return pricePerOp Pre\\u00e7o da energia.\\n     * @return country Pa\\u00eds de localiza\\u00e7\\u00e3o.\\n     * @return city Cidade de localiza\\u00e7\\u00e3o.\\n     * @return active Status da microgrid.\\n     * @return latestKWh \\u00daltima leitura de energia.\\n     * @return capacityGB Capacidade de processamento equivalente em GB.\\n     */\\n    function getMicrogridInfo(bytes32 hash)\\n        external\\n        view\\n        returns (\\n            address walletMetamask,\\n            uint256 pricePerOp,\\n            string  memory country,\\n            string  memory city,\\n            bool    active,\\n            uint256 latestKWh,\\n            uint256 capacityGB\\n        )\\n    {\\n        Microgrid storage mg = microgridByHash[hash];\\n        require(mg.owner != address(0), \\\"Microgrid: Desconhecida\\\");\\n        \\n        uint256 kwh = latestSensor(hash).kWh;\\n        \\n        return (\\n            mg.walletMetamask,\\n            mg.energyPricePerOp,\\n            mg.country,\\n            mg.city,\\n            mg.isActive,\\n            kwh,\\n            kwh / KWH_PER_GB\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9c9b119f2ccb478dce11564a746bb12c6f59c7d0cd5b7c3090a03f8b613c6bd0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002f0238038062002f028339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b612dd8806200012a6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063ba59286a11610097578063de8c044811610066578063de8c0448146102aa578063ed23e348146102da578063f9797a911461030a578063fd8195c214610328576100f5565b8063ba59286a1461020f578063bef9f8d11461022b578063caa83a9c1461025b578063d3c4108514610279576100f5565b806338b031d8116100d357806338b031d81461017f5780639654ef6e14610189578063b4771d90146101a5578063b6516f61146101da576100f5565b80630a36107c146100fa57806316bc93c81461012d5780632e12661f14610163575b600080fd5b610114600480360381019061010f919061192e565b610358565b6040516101249493929190611c2f565b60405180910390f35b61014760048036038101906101429190611cbc565b610625565b60405161015a9796959493929190611db2565b60405180910390f35b61017d60048036038101906101789190611e5b565b61086f565b005b610187610aac565b005b6101a3600480360381019061019e9190611ff7565b610d64565b005b6101bf60048036038101906101ba9190612096565b611077565b6040516101d1969594939291906120d2565b60405180910390f35b6101f460048036038101906101ef9190611cbc565b6111f0565b60405161020696959493929190612141565b60405180910390f35b610229600480360381019061022491906121b0565b611389565b005b61024560048036038101906102409190611cbc565b611699565b604051610252919061227e565b60405180910390f35b61026361174a565b60405161027091906122f8565b60405180910390f35b610293600480360381019061028e9190611e5b565b61176e565b6040516102a1929190612313565b60405180910390f35b6102c460048036038101906102bf919061233c565b6117af565b6040516102d19190612369565b60405180910390f35b6102f460048036038101906102ef9190611e5b565b6117d3565b6040516103019190612369565b60405180910390f35b610312611804565b60405161031f9190612384565b60405180910390f35b610342600480360381019061033d919061233c565b61185c565b60405161034f91906123a6565b60405180910390f35b60608060608060008888888860405160200161037794939291906123f1565b60405160208183030381529060405280519060200120905060006006600083815260200190815260200160002090506000818054905090508067ffffffffffffffff8111156103c9576103c8611ecc565b5b6040519080825280602002602001820160405280156103f75781602001602082028036833780820191505090505b5096508067ffffffffffffffff81111561041457610413611ecc565b5b6040519080825280602002602001820160405280156104425781602001602082028036833780820191505090505b5095508067ffffffffffffffff81111561045f5761045e611ecc565b5b60405190808252806020026020018201604052801561048d5781602001602082028036833780820191505090505b5094508067ffffffffffffffff8111156104aa576104a9611ecc565b5b6040519080825280602002602001820160405280156104d85781602001602082028036833780820191505090505b50935060005b818110156106165760008382815481106104fb576104fa612419565b5b906000526020600020015490506000600160008381526020019081526020016000209050818a848151811061053357610532612419565b5b6020026020010181815250508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689848151811061057757610576612419565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080600101548884815181106105c9576105c8612419565b5b6020026020010181815250506105de82611699565b600001518784815181106105f5576105f4612419565b5b6020026020010181815250505050808061060e90612477565b9150506104de565b50505050945094509450949050565b600080606080600080600080600160008a81526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d09061250b565b60405180910390fd5b60006106e48a611699565b6000015190508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826001015483600201846003018560040160009054906101000a900460ff168560058761073c919061255a565b848054610748906125ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610774906125ba565b80156107c15780601f10610796576101008083540402835291602001916107c1565b820191906000526020600020905b8154815290600101906020018083116107a457829003601f168201915b505050505094508380546107d4906125ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610800906125ba565b801561084d5780601f106108225761010080835404028352916020019161084d565b820191906000526020600020905b81548152906001019060200180831161083057829003601f168201915b5050505050935098509850985098509850985098505050919395979092949650565b60006001600084815260200190815260200160002090508060040160009054906101000a900460ff166108d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ce90612637565b60405180910390fd5b8060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061098457508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6109c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ba906126a3565b60405180910390fd5b60008211610a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fd9061270f565b60405180910390fd5b60026000848152602001908152602001600020604051806040016040528084815260200142815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050827fd04ae7f5c365f5af29e2c51608606750fa1c539688801e8fab7195ee17d4fa338342604051610a9f929190612313565b60405180910390a2505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900460ff16610b40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b379061277b565b60405180910390fd5b600060058260050154610b53919061279b565b90506000610b648360010154611699565b600001519050601e82610b77919061279b565b606482610b84919061279b565b1015610d5f5760008360030184600401604051602001610ba5929190612875565b60405160208183030381529060405280519060200120905060006006600083815260200190815260200160002090506000806000905060005b8380549050811015610c8c576000848281548110610bff57610bfe612419565b5b906000526020600020015490508860010154811480610c3f57506001600082815260200190815260200160002060040160009054906101000a900460ff16155b15610c4a5750610c79565b6000610c5582611699565b600001519050888110158015610c6a57508381115b15610c76578194508093505b50505b8080610c8490612477565b915050610bde565b506000801b8214610cf9573373ffffffffffffffffffffffffffffffffffffffff167fa536bd2faeed580ba08e0d9181ca6680469923f19f421c296c67b430117cb7ce886001015484604051610ce3929190612899565b60405180910390a2818760010181905550610d5a565b60008760020160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fd9957750e6343405c319eb99a4ec67fa11cfd66969318cbc71aa2d45fa53a34960405160405180910390a25b505050505b505050565b6000848383604051602001610d7b9392919061293b565b604051602081830303815290604052805190602001209050600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2f906129bc565b60405180910390fd5b6040518060c001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020016001151581526020013373ffffffffffffffffffffffffffffffffffffffff168152506001600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002019081610f0d9190612b69565b506060820151816003019081610f239190612b69565b5060808201518160040160006101000a81548160ff02191690831515021790555060a08201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600481908060018154018082558091505060019003906000526020600020016000909190919091505560008383604051602001610fcc929190612c3b565b604051602081830303815290604052805190602001209050600660008281526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff16827feb9ae7f4f294a758100f08a8097ce48756513cea01d7f314163f5f3064adfb158686604051611067929190612c5f565b60405180910390a3505050505050565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16908060030180546110d9906125ba565b80601f0160208091040260200160405190810160405280929190818152602001828054611105906125ba565b80156111525780601f1061112757610100808354040283529160200191611152565b820191906000526020600020905b81548152906001019060200180831161113557829003601f168201915b505050505090806004018054611167906125ba565b80601f0160208091040260200160405190810160405280929190818152602001828054611193906125ba565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b5050505050908060050154905086565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101549080600201805461123f906125ba565b80601f016020809104026020016040519081016040528092919081815260200182805461126b906125ba565b80156112b85780601f1061128d576101008083540402835291602001916112b8565b820191906000526020600020905b81548152906001019060200180831161129b57829003601f168201915b5050505050908060030180546112cd906125ba565b80601f01602080910402602001604051908101604052809291908181526020018280546112f9906125ba565b80156113465780601f1061131b57610100808354040283529160200191611346565b820191906000526020600020905b81548152906001019060200180831161132957829003601f168201915b5050505050908060040160009054906101000a900460ff16908060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b600073ffffffffffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461145a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145190612ce2565b60405180910390fd5b6001600085815260200190815260200160002060040160009054906101000a900460ff166114bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b490612d4e565b60405180910390fd5b6040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200185815260200160011515815260200184815260200183815260200182815250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160030190816115c89190612b69565b5060808201518160040190816115de9190612b69565b5060a082015181600501559050506005339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550833373ffffffffffffffffffffffffffffffffffffffff167fb098a592c213bb65419fbec76799a12091bcb1ab0dfc0890bbc386f7980378e360405160405180910390a350505050565b6116a161189b565b600060026000848152602001908152602001600020805490509050600081036116e3576040518060400160405280600081526020016000815250915050611745565b600260008481526020019081526020016000206001826117039190612d6e565b8154811061171457611713612419565b5b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509150505b919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002602052816000526040600020818154811061178a57600080fd5b9060005260206000209060020201600091509150508060000154908060010154905082565b600481815481106117bf57600080fd5b906000526020600020016000915090505481565b600660205281600052604060002081815481106117ef57600080fd5b90600052602060002001600091509150505481565b6060600480548060200260200160405190810160405280929190818152602001828054801561185257602002820191906000526020600020905b81548152602001906001019080831161183e575b5050505050905090565b6005818154811061186c57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126118ee576118ed6118c9565b5b8235905067ffffffffffffffff81111561190b5761190a6118ce565b5b602083019150836001820283011115611927576119266118d3565b5b9250929050565b60008060008060408587031215611948576119476118bf565b5b600085013567ffffffffffffffff811115611966576119656118c4565b5b611972878288016118d8565b9450945050602085013567ffffffffffffffff811115611995576119946118c4565b5b6119a1878288016118d8565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6119ee816119db565b82525050565b6000611a0083836119e5565b60208301905092915050565b6000602082019050919050565b6000611a24826119af565b611a2e81856119ba565b9350611a39836119cb565b8060005b83811015611a6a578151611a5188826119f4565b9750611a5c83611a0c565b925050600181019050611a3d565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ace82611aa3565b9050919050565b611ade81611ac3565b82525050565b6000611af08383611ad5565b60208301905092915050565b6000602082019050919050565b6000611b1482611a77565b611b1e8185611a82565b9350611b2983611a93565b8060005b83811015611b5a578151611b418882611ae4565b9750611b4c83611afc565b925050600181019050611b2d565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b611ba681611b93565b82525050565b6000611bb88383611b9d565b60208301905092915050565b6000602082019050919050565b6000611bdc82611b67565b611be68185611b72565b9350611bf183611b83565b8060005b83811015611c22578151611c098882611bac565b9750611c1483611bc4565b925050600181019050611bf5565b5085935050505092915050565b60006080820190508181036000830152611c498187611a19565b90508181036020830152611c5d8186611b09565b90508181036040830152611c718185611bd1565b90508181036060830152611c858184611bd1565b905095945050505050565b611c99816119db565b8114611ca457600080fd5b50565b600081359050611cb681611c90565b92915050565b600060208284031215611cd257611cd16118bf565b5b6000611ce084828501611ca7565b91505092915050565b611cf281611ac3565b82525050565b611d0181611b93565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d41578082015181840152602081019050611d26565b60008484015250505050565b6000601f19601f8301169050919050565b6000611d6982611d07565b611d738185611d12565b9350611d83818560208601611d23565b611d8c81611d4d565b840191505092915050565b60008115159050919050565b611dac81611d97565b82525050565b600060e082019050611dc7600083018a611ce9565b611dd46020830189611cf8565b8181036040830152611de68188611d5e565b90508181036060830152611dfa8187611d5e565b9050611e096080830186611da3565b611e1660a0830185611cf8565b611e2360c0830184611cf8565b98975050505050505050565b611e3881611b93565b8114611e4357600080fd5b50565b600081359050611e5581611e2f565b92915050565b60008060408385031215611e7257611e716118bf565b5b6000611e8085828601611ca7565b9250506020611e9185828601611e46565b9150509250929050565b611ea481611ac3565b8114611eaf57600080fd5b50565b600081359050611ec181611e9b565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f0482611d4d565b810181811067ffffffffffffffff82111715611f2357611f22611ecc565b5b80604052505050565b6000611f366118b5565b9050611f428282611efb565b919050565b600067ffffffffffffffff821115611f6257611f61611ecc565b5b611f6b82611d4d565b9050602081019050919050565b82818337600083830152505050565b6000611f9a611f9584611f47565b611f2c565b905082815260208101848484011115611fb657611fb5611ec7565b5b611fc1848285611f78565b509392505050565b600082601f830112611fde57611fdd6118c9565b5b8135611fee848260208601611f87565b91505092915050565b60008060008060808587031215612011576120106118bf565b5b600061201f87828801611eb2565b945050602061203087828801611e46565b935050604085013567ffffffffffffffff811115612051576120506118c4565b5b61205d87828801611fc9565b925050606085013567ffffffffffffffff81111561207e5761207d6118c4565b5b61208a87828801611fc9565b91505092959194509250565b6000602082840312156120ac576120ab6118bf565b5b60006120ba84828501611eb2565b91505092915050565b6120cc816119db565b82525050565b600060c0820190506120e76000830189611ce9565b6120f460208301886120c3565b6121016040830187611da3565b81810360608301526121138186611d5e565b905081810360808301526121278185611d5e565b905061213660a0830184611cf8565b979650505050505050565b600060c0820190506121566000830189611ce9565b6121636020830188611cf8565b81810360408301526121758187611d5e565b905081810360608301526121898186611d5e565b90506121986080830185611da3565b6121a560a0830184611ce9565b979650505050505050565b600080600080608085870312156121ca576121c96118bf565b5b60006121d887828801611ca7565b945050602085013567ffffffffffffffff8111156121f9576121f86118c4565b5b61220587828801611fc9565b935050604085013567ffffffffffffffff811115612226576122256118c4565b5b61223287828801611fc9565b925050606061224387828801611e46565b91505092959194509250565b6040820160008201516122656000850182611b9d565b5060208201516122786020850182611b9d565b50505050565b6000604082019050612293600083018461224f565b92915050565b6000819050919050565b60006122be6122b96122b484611aa3565b612299565b611aa3565b9050919050565b60006122d0826122a3565b9050919050565b60006122e2826122c5565b9050919050565b6122f2816122d7565b82525050565b600060208201905061230d60008301846122e9565b92915050565b60006040820190506123286000830185611cf8565b6123356020830184611cf8565b9392505050565b600060208284031215612352576123516118bf565b5b600061236084828501611e46565b91505092915050565b600060208201905061237e60008301846120c3565b92915050565b6000602082019050818103600083015261239e8184611a19565b905092915050565b60006020820190506123bb6000830184611ce9565b92915050565b600081905092915050565b60006123d883856123c1565b93506123e5838584611f78565b82840190509392505050565b60006123fe8286886123cc565b915061240b8284866123cc565b915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061248282611b93565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124b4576124b3612448565b5b600182019050919050565b7f4d6963726f677269643a20446573636f6e686563696461000000000000000000600082015250565b60006124f5601783611d12565b9150612500826124bf565b602082019050919050565b60006020820190508181036000830152612524816124e8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061256582611b93565b915061257083611b93565b9250826125805761257f61252b565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806125d257607f821691505b6020821081036125e5576125e461258b565b5b50919050565b7f4d6963726f677269643a20496e61746976610000000000000000000000000000600082015250565b6000612621601283611d12565b915061262c826125eb565b602082019050919050565b6000602082019050818103600083015261265081612614565b9050919050565b7f4d6963726f677269643a204e616f206175746f72697a61646f00000000000000600082015250565b600061268d601983611d12565b915061269882612657565b602082019050919050565b600060208201905081810360008301526126bc81612680565b9050919050565b7f53656e736f723a206b5768206465766520736572206d61696f72207175652030600082015250565b60006126f9602083611d12565b9150612704826126c3565b602082019050919050565b60006020820190508181036000830152612728816126ec565b9050919050565b7f4e6f64653a20496e617469766f00000000000000000000000000000000000000600082015250565b6000612765600d83611d12565b91506127708261272f565b602082019050919050565b6000602082019050818103600083015261279481612758565b9050919050565b60006127a682611b93565b91506127b183611b93565b92508282026127bf81611b93565b915082820484148315176127d6576127d5612448565b5b5092915050565b60008190508160005260206000209050919050565b600081546127ff816125ba565b61280981866123c1565b9450600182166000811461282457600181146128395761286c565b60ff198316865281151582028601935061286c565b612842856127dd565b60005b8381101561286457815481890152600182019150602081019050612845565b838801955050505b50505092915050565b600061288182856127f2565b915061288d82846127f2565b91508190509392505050565b60006040820190506128ae60008301856120c3565b6128bb60208301846120c3565b9392505050565b60008160601b9050919050565b60006128da826128c2565b9050919050565b60006128ec826128cf565b9050919050565b6129046128ff82611ac3565b6128e1565b82525050565b600061291582611d07565b61291f81856123c1565b935061292f818560208601611d23565b80840191505092915050565b600061294782866128f3565b601482019150612957828561290a565b9150612963828461290a565b9150819050949350505050565b7f4d6963726f677269643a204a6120726567697374726164610000000000000000600082015250565b60006129a6601883611d12565b91506129b182612970565b602082019050919050565b600060208201905081810360008301526129d581612999565b9050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612a297fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826129ec565b612a3386836129ec565b95508019841693508086168417925050509392505050565b6000612a66612a61612a5c84611b93565b612299565b611b93565b9050919050565b6000819050919050565b612a8083612a4b565b612a94612a8c82612a6d565b8484546129f9565b825550505050565b600090565b612aa9612a9c565b612ab4818484612a77565b505050565b5b81811015612ad857612acd600082612aa1565b600181019050612aba565b5050565b601f821115612b1d57612aee816127dd565b612af7846129dc565b81016020851015612b06578190505b612b1a612b12856129dc565b830182612ab9565b50505b505050565b600082821c905092915050565b6000612b4060001984600802612b22565b1980831691505092915050565b6000612b598383612b2f565b9150826002028217905092915050565b612b7282611d07565b67ffffffffffffffff811115612b8b57612b8a611ecc565b5b612b9582546125ba565b612ba0828285612adc565b600060209050601f831160018114612bd35760008415612bc1578287015190505b612bcb8582612b4d565b865550612c33565b601f198416612be1866127dd565b60005b82811015612c0957848901518255600182019150602085019450602081019050612be4565b86831015612c265784890151612c22601f891682612b2f565b8355505b6001600288020188555050505b505050505050565b6000612c47828561290a565b9150612c53828461290a565b91508190509392505050565b60006040820190508181036000830152612c798185611d5e565b90508181036020830152612c8d8184611d5e565b90509392505050565b7f4e6f64653a204a61206578697374650000000000000000000000000000000000600082015250565b6000612ccc600f83611d12565b9150612cd782612c96565b602082019050919050565b60006020820190508181036000830152612cfb81612cbf565b9050919050565b7f4e6f64653a204d6963726f6772696420696e696369616c20696e617469766100600082015250565b6000612d38601f83611d12565b9150612d4382612d02565b602082019050919050565b60006020820190508181036000830152612d6781612d2b565b9050919050565b6000612d7982611b93565b9150612d8483611b93565b9250828203905081811115612d9c57612d9b612448565b5b9291505056fea264697066735822122043d15d54eb7d1c017b56272940c13449223c01a43c8ff7f628583aaf4f8d5f6064736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063ba59286a11610097578063de8c044811610066578063de8c0448146102aa578063ed23e348146102da578063f9797a911461030a578063fd8195c214610328576100f5565b8063ba59286a1461020f578063bef9f8d11461022b578063caa83a9c1461025b578063d3c4108514610279576100f5565b806338b031d8116100d357806338b031d81461017f5780639654ef6e14610189578063b4771d90146101a5578063b6516f61146101da576100f5565b80630a36107c146100fa57806316bc93c81461012d5780632e12661f14610163575b600080fd5b610114600480360381019061010f919061192e565b610358565b6040516101249493929190611c2f565b60405180910390f35b61014760048036038101906101429190611cbc565b610625565b60405161015a9796959493929190611db2565b60405180910390f35b61017d60048036038101906101789190611e5b565b61086f565b005b610187610aac565b005b6101a3600480360381019061019e9190611ff7565b610d64565b005b6101bf60048036038101906101ba9190612096565b611077565b6040516101d1969594939291906120d2565b60405180910390f35b6101f460048036038101906101ef9190611cbc565b6111f0565b60405161020696959493929190612141565b60405180910390f35b610229600480360381019061022491906121b0565b611389565b005b61024560048036038101906102409190611cbc565b611699565b604051610252919061227e565b60405180910390f35b61026361174a565b60405161027091906122f8565b60405180910390f35b610293600480360381019061028e9190611e5b565b61176e565b6040516102a1929190612313565b60405180910390f35b6102c460048036038101906102bf919061233c565b6117af565b6040516102d19190612369565b60405180910390f35b6102f460048036038101906102ef9190611e5b565b6117d3565b6040516103019190612369565b60405180910390f35b610312611804565b60405161031f9190612384565b60405180910390f35b610342600480360381019061033d919061233c565b61185c565b60405161034f91906123a6565b60405180910390f35b60608060608060008888888860405160200161037794939291906123f1565b60405160208183030381529060405280519060200120905060006006600083815260200190815260200160002090506000818054905090508067ffffffffffffffff8111156103c9576103c8611ecc565b5b6040519080825280602002602001820160405280156103f75781602001602082028036833780820191505090505b5096508067ffffffffffffffff81111561041457610413611ecc565b5b6040519080825280602002602001820160405280156104425781602001602082028036833780820191505090505b5095508067ffffffffffffffff81111561045f5761045e611ecc565b5b60405190808252806020026020018201604052801561048d5781602001602082028036833780820191505090505b5094508067ffffffffffffffff8111156104aa576104a9611ecc565b5b6040519080825280602002602001820160405280156104d85781602001602082028036833780820191505090505b50935060005b818110156106165760008382815481106104fb576104fa612419565b5b906000526020600020015490506000600160008381526020019081526020016000209050818a848151811061053357610532612419565b5b6020026020010181815250508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689848151811061057757610576612419565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080600101548884815181106105c9576105c8612419565b5b6020026020010181815250506105de82611699565b600001518784815181106105f5576105f4612419565b5b6020026020010181815250505050808061060e90612477565b9150506104de565b50505050945094509450949050565b600080606080600080600080600160008a81526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d09061250b565b60405180910390fd5b60006106e48a611699565b6000015190508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826001015483600201846003018560040160009054906101000a900460ff168560058761073c919061255a565b848054610748906125ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610774906125ba565b80156107c15780601f10610796576101008083540402835291602001916107c1565b820191906000526020600020905b8154815290600101906020018083116107a457829003601f168201915b505050505094508380546107d4906125ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610800906125ba565b801561084d5780601f106108225761010080835404028352916020019161084d565b820191906000526020600020905b81548152906001019060200180831161083057829003601f168201915b5050505050935098509850985098509850985098505050919395979092949650565b60006001600084815260200190815260200160002090508060040160009054906101000a900460ff166108d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ce90612637565b60405180910390fd5b8060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061098457508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6109c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ba906126a3565b60405180910390fd5b60008211610a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fd9061270f565b60405180910390fd5b60026000848152602001908152602001600020604051806040016040528084815260200142815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050827fd04ae7f5c365f5af29e2c51608606750fa1c539688801e8fab7195ee17d4fa338342604051610a9f929190612313565b60405180910390a2505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900460ff16610b40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b379061277b565b60405180910390fd5b600060058260050154610b53919061279b565b90506000610b648360010154611699565b600001519050601e82610b77919061279b565b606482610b84919061279b565b1015610d5f5760008360030184600401604051602001610ba5929190612875565b60405160208183030381529060405280519060200120905060006006600083815260200190815260200160002090506000806000905060005b8380549050811015610c8c576000848281548110610bff57610bfe612419565b5b906000526020600020015490508860010154811480610c3f57506001600082815260200190815260200160002060040160009054906101000a900460ff16155b15610c4a5750610c79565b6000610c5582611699565b600001519050888110158015610c6a57508381115b15610c76578194508093505b50505b8080610c8490612477565b915050610bde565b506000801b8214610cf9573373ffffffffffffffffffffffffffffffffffffffff167fa536bd2faeed580ba08e0d9181ca6680469923f19f421c296c67b430117cb7ce886001015484604051610ce3929190612899565b60405180910390a2818760010181905550610d5a565b60008760020160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fd9957750e6343405c319eb99a4ec67fa11cfd66969318cbc71aa2d45fa53a34960405160405180910390a25b505050505b505050565b6000848383604051602001610d7b9392919061293b565b604051602081830303815290604052805190602001209050600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2f906129bc565b60405180910390fd5b6040518060c001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020016001151581526020013373ffffffffffffffffffffffffffffffffffffffff168152506001600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002019081610f0d9190612b69565b506060820151816003019081610f239190612b69565b5060808201518160040160006101000a81548160ff02191690831515021790555060a08201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600481908060018154018082558091505060019003906000526020600020016000909190919091505560008383604051602001610fcc929190612c3b565b604051602081830303815290604052805190602001209050600660008281526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff16827feb9ae7f4f294a758100f08a8097ce48756513cea01d7f314163f5f3064adfb158686604051611067929190612c5f565b60405180910390a3505050505050565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16908060030180546110d9906125ba565b80601f0160208091040260200160405190810160405280929190818152602001828054611105906125ba565b80156111525780601f1061112757610100808354040283529160200191611152565b820191906000526020600020905b81548152906001019060200180831161113557829003601f168201915b505050505090806004018054611167906125ba565b80601f0160208091040260200160405190810160405280929190818152602001828054611193906125ba565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b5050505050908060050154905086565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101549080600201805461123f906125ba565b80601f016020809104026020016040519081016040528092919081815260200182805461126b906125ba565b80156112b85780601f1061128d576101008083540402835291602001916112b8565b820191906000526020600020905b81548152906001019060200180831161129b57829003601f168201915b5050505050908060030180546112cd906125ba565b80601f01602080910402602001604051908101604052809291908181526020018280546112f9906125ba565b80156113465780601f1061131b57610100808354040283529160200191611346565b820191906000526020600020905b81548152906001019060200180831161132957829003601f168201915b5050505050908060040160009054906101000a900460ff16908060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b600073ffffffffffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461145a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145190612ce2565b60405180910390fd5b6001600085815260200190815260200160002060040160009054906101000a900460ff166114bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b490612d4e565b60405180910390fd5b6040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200185815260200160011515815260200184815260200183815260200182815250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160030190816115c89190612b69565b5060808201518160040190816115de9190612b69565b5060a082015181600501559050506005339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550833373ffffffffffffffffffffffffffffffffffffffff167fb098a592c213bb65419fbec76799a12091bcb1ab0dfc0890bbc386f7980378e360405160405180910390a350505050565b6116a161189b565b600060026000848152602001908152602001600020805490509050600081036116e3576040518060400160405280600081526020016000815250915050611745565b600260008481526020019081526020016000206001826117039190612d6e565b8154811061171457611713612419565b5b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509150505b919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002602052816000526040600020818154811061178a57600080fd5b9060005260206000209060020201600091509150508060000154908060010154905082565b600481815481106117bf57600080fd5b906000526020600020016000915090505481565b600660205281600052604060002081815481106117ef57600080fd5b90600052602060002001600091509150505481565b6060600480548060200260200160405190810160405280929190818152602001828054801561185257602002820191906000526020600020905b81548152602001906001019080831161183e575b5050505050905090565b6005818154811061186c57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126118ee576118ed6118c9565b5b8235905067ffffffffffffffff81111561190b5761190a6118ce565b5b602083019150836001820283011115611927576119266118d3565b5b9250929050565b60008060008060408587031215611948576119476118bf565b5b600085013567ffffffffffffffff811115611966576119656118c4565b5b611972878288016118d8565b9450945050602085013567ffffffffffffffff811115611995576119946118c4565b5b6119a1878288016118d8565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6119ee816119db565b82525050565b6000611a0083836119e5565b60208301905092915050565b6000602082019050919050565b6000611a24826119af565b611a2e81856119ba565b9350611a39836119cb565b8060005b83811015611a6a578151611a5188826119f4565b9750611a5c83611a0c565b925050600181019050611a3d565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ace82611aa3565b9050919050565b611ade81611ac3565b82525050565b6000611af08383611ad5565b60208301905092915050565b6000602082019050919050565b6000611b1482611a77565b611b1e8185611a82565b9350611b2983611a93565b8060005b83811015611b5a578151611b418882611ae4565b9750611b4c83611afc565b925050600181019050611b2d565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b611ba681611b93565b82525050565b6000611bb88383611b9d565b60208301905092915050565b6000602082019050919050565b6000611bdc82611b67565b611be68185611b72565b9350611bf183611b83565b8060005b83811015611c22578151611c098882611bac565b9750611c1483611bc4565b925050600181019050611bf5565b5085935050505092915050565b60006080820190508181036000830152611c498187611a19565b90508181036020830152611c5d8186611b09565b90508181036040830152611c718185611bd1565b90508181036060830152611c858184611bd1565b905095945050505050565b611c99816119db565b8114611ca457600080fd5b50565b600081359050611cb681611c90565b92915050565b600060208284031215611cd257611cd16118bf565b5b6000611ce084828501611ca7565b91505092915050565b611cf281611ac3565b82525050565b611d0181611b93565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d41578082015181840152602081019050611d26565b60008484015250505050565b6000601f19601f8301169050919050565b6000611d6982611d07565b611d738185611d12565b9350611d83818560208601611d23565b611d8c81611d4d565b840191505092915050565b60008115159050919050565b611dac81611d97565b82525050565b600060e082019050611dc7600083018a611ce9565b611dd46020830189611cf8565b8181036040830152611de68188611d5e565b90508181036060830152611dfa8187611d5e565b9050611e096080830186611da3565b611e1660a0830185611cf8565b611e2360c0830184611cf8565b98975050505050505050565b611e3881611b93565b8114611e4357600080fd5b50565b600081359050611e5581611e2f565b92915050565b60008060408385031215611e7257611e716118bf565b5b6000611e8085828601611ca7565b9250506020611e9185828601611e46565b9150509250929050565b611ea481611ac3565b8114611eaf57600080fd5b50565b600081359050611ec181611e9b565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f0482611d4d565b810181811067ffffffffffffffff82111715611f2357611f22611ecc565b5b80604052505050565b6000611f366118b5565b9050611f428282611efb565b919050565b600067ffffffffffffffff821115611f6257611f61611ecc565b5b611f6b82611d4d565b9050602081019050919050565b82818337600083830152505050565b6000611f9a611f9584611f47565b611f2c565b905082815260208101848484011115611fb657611fb5611ec7565b5b611fc1848285611f78565b509392505050565b600082601f830112611fde57611fdd6118c9565b5b8135611fee848260208601611f87565b91505092915050565b60008060008060808587031215612011576120106118bf565b5b600061201f87828801611eb2565b945050602061203087828801611e46565b935050604085013567ffffffffffffffff811115612051576120506118c4565b5b61205d87828801611fc9565b925050606085013567ffffffffffffffff81111561207e5761207d6118c4565b5b61208a87828801611fc9565b91505092959194509250565b6000602082840312156120ac576120ab6118bf565b5b60006120ba84828501611eb2565b91505092915050565b6120cc816119db565b82525050565b600060c0820190506120e76000830189611ce9565b6120f460208301886120c3565b6121016040830187611da3565b81810360608301526121138186611d5e565b905081810360808301526121278185611d5e565b905061213660a0830184611cf8565b979650505050505050565b600060c0820190506121566000830189611ce9565b6121636020830188611cf8565b81810360408301526121758187611d5e565b905081810360608301526121898186611d5e565b90506121986080830185611da3565b6121a560a0830184611ce9565b979650505050505050565b600080600080608085870312156121ca576121c96118bf565b5b60006121d887828801611ca7565b945050602085013567ffffffffffffffff8111156121f9576121f86118c4565b5b61220587828801611fc9565b935050604085013567ffffffffffffffff811115612226576122256118c4565b5b61223287828801611fc9565b925050606061224387828801611e46565b91505092959194509250565b6040820160008201516122656000850182611b9d565b5060208201516122786020850182611b9d565b50505050565b6000604082019050612293600083018461224f565b92915050565b6000819050919050565b60006122be6122b96122b484611aa3565b612299565b611aa3565b9050919050565b60006122d0826122a3565b9050919050565b60006122e2826122c5565b9050919050565b6122f2816122d7565b82525050565b600060208201905061230d60008301846122e9565b92915050565b60006040820190506123286000830185611cf8565b6123356020830184611cf8565b9392505050565b600060208284031215612352576123516118bf565b5b600061236084828501611e46565b91505092915050565b600060208201905061237e60008301846120c3565b92915050565b6000602082019050818103600083015261239e8184611a19565b905092915050565b60006020820190506123bb6000830184611ce9565b92915050565b600081905092915050565b60006123d883856123c1565b93506123e5838584611f78565b82840190509392505050565b60006123fe8286886123cc565b915061240b8284866123cc565b915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061248282611b93565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124b4576124b3612448565b5b600182019050919050565b7f4d6963726f677269643a20446573636f6e686563696461000000000000000000600082015250565b60006124f5601783611d12565b9150612500826124bf565b602082019050919050565b60006020820190508181036000830152612524816124e8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061256582611b93565b915061257083611b93565b9250826125805761257f61252b565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806125d257607f821691505b6020821081036125e5576125e461258b565b5b50919050565b7f4d6963726f677269643a20496e61746976610000000000000000000000000000600082015250565b6000612621601283611d12565b915061262c826125eb565b602082019050919050565b6000602082019050818103600083015261265081612614565b9050919050565b7f4d6963726f677269643a204e616f206175746f72697a61646f00000000000000600082015250565b600061268d601983611d12565b915061269882612657565b602082019050919050565b600060208201905081810360008301526126bc81612680565b9050919050565b7f53656e736f723a206b5768206465766520736572206d61696f72207175652030600082015250565b60006126f9602083611d12565b9150612704826126c3565b602082019050919050565b60006020820190508181036000830152612728816126ec565b9050919050565b7f4e6f64653a20496e617469766f00000000000000000000000000000000000000600082015250565b6000612765600d83611d12565b91506127708261272f565b602082019050919050565b6000602082019050818103600083015261279481612758565b9050919050565b60006127a682611b93565b91506127b183611b93565b92508282026127bf81611b93565b915082820484148315176127d6576127d5612448565b5b5092915050565b60008190508160005260206000209050919050565b600081546127ff816125ba565b61280981866123c1565b9450600182166000811461282457600181146128395761286c565b60ff198316865281151582028601935061286c565b612842856127dd565b60005b8381101561286457815481890152600182019150602081019050612845565b838801955050505b50505092915050565b600061288182856127f2565b915061288d82846127f2565b91508190509392505050565b60006040820190506128ae60008301856120c3565b6128bb60208301846120c3565b9392505050565b60008160601b9050919050565b60006128da826128c2565b9050919050565b60006128ec826128cf565b9050919050565b6129046128ff82611ac3565b6128e1565b82525050565b600061291582611d07565b61291f81856123c1565b935061292f818560208601611d23565b80840191505092915050565b600061294782866128f3565b601482019150612957828561290a565b9150612963828461290a565b9150819050949350505050565b7f4d6963726f677269643a204a6120726567697374726164610000000000000000600082015250565b60006129a6601883611d12565b91506129b182612970565b602082019050919050565b600060208201905081810360008301526129d581612999565b9050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612a297fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826129ec565b612a3386836129ec565b95508019841693508086168417925050509392505050565b6000612a66612a61612a5c84611b93565b612299565b611b93565b9050919050565b6000819050919050565b612a8083612a4b565b612a94612a8c82612a6d565b8484546129f9565b825550505050565b600090565b612aa9612a9c565b612ab4818484612a77565b505050565b5b81811015612ad857612acd600082612aa1565b600181019050612aba565b5050565b601f821115612b1d57612aee816127dd565b612af7846129dc565b81016020851015612b06578190505b612b1a612b12856129dc565b830182612ab9565b50505b505050565b600082821c905092915050565b6000612b4060001984600802612b22565b1980831691505092915050565b6000612b598383612b2f565b9150826002028217905092915050565b612b7282611d07565b67ffffffffffffffff811115612b8b57612b8a611ecc565b5b612b9582546125ba565b612ba0828285612adc565b600060209050601f831160018114612bd35760008415612bc1578287015190505b612bcb8582612b4d565b865550612c33565b601f198416612be1866127dd565b60005b82811015612c0957848901518255600182019150602085019450602081019050612be4565b86831015612c265784890151612c22601f891682612b2f565b8355505b6001600288020188555050505b505050505050565b6000612c47828561290a565b9150612c53828461290a565b91508190509392505050565b60006040820190508181036000830152612c798185611d5e565b90508181036020830152612c8d8184611d5e565b90509392505050565b7f4e6f64653a204a61206578697374650000000000000000000000000000000000600082015250565b6000612ccc600f83611d12565b9150612cd782612c96565b602082019050919050565b60006020820190508181036000830152612cfb81612cbf565b9050919050565b7f4e6f64653a204d6963726f6772696420696e696369616c20696e617469766100600082015250565b6000612d38601f83611d12565b9150612d4382612d02565b602082019050919050565b60006020820190508181036000830152612d6781612d2b565b9050919050565b6000612d7982611b93565b9150612d8483611b93565b9250828203905081811115612d9c57612d9b612448565b5b9291505056fea264697066735822122043d15d54eb7d1c017b56272940c13449223c01a43c8ff7f628583aaf4f8d5f6064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getMicrogridInfo(bytes32)": {
        "params": {
          "hash": "O hash da microgrid."
        },
        "returns": {
          "active": "Status da microgrid.",
          "capacityGB": "Capacidade de processamento equivalente em GB.",
          "city": "Cidade de localização.",
          "country": "País de localização.",
          "latestKWh": "Última leitura de energia.",
          "pricePerOp": "Preço da energia.",
          "walletMetamask": "Endereço da carteira do operador."
        }
      },
      "latestSensor(bytes32)": {
        "params": {
          "hash": "O hash da microgrid."
        },
        "returns": {
          "_0": "SensorRecord O último registro de energia."
        }
      },
      "listMicrogrids()": {
        "details": "Útil para aplicações externas descobrirem todas as microgrids."
      },
      "microgridsByLocation(string,string)": {
        "details": "Função otimizada que busca por um índice de localização, economizando gás.",
        "returns": {
          "hashes": "Array com os hashes das microgrids.",
          "latestKWh": "Array com a última leitura de kWh de cada microgrid.",
          "prices": "Array com os preços de energia.",
          "wallets": "Array com as carteiras das microgrids."
        }
      },
      "registerMicrogrid(address,uint256,string,string)": {
        "details": "Gera um hash único para a microgrid e a indexa por localização para buscas futuras.",
        "params": {
          "_city": "A cidade onde a microgrid está localizada.",
          "_country": "O país onde a microgrid está localizada.",
          "_energyPricePerOp": "O preço da energia por operação.",
          "_walletMetamask": "O endereço da carteira do operador da microgrid."
        }
      },
      "registerNode(bytes32,string,string,uint256)": {
        "params": {
          "city": "A cidade onde o nó está operando.",
          "country": "O país onde o nó está operando.",
          "initialGB": "A capacidade de armazenamento/processamento do nó.",
          "microgridHash": "O hash da microgrid inicial à qual o nó se conectará."
        }
      },
      "submitSensorData(bytes32,uint256)": {
        "details": "Apenas o dono do registro ou a carteira da microgrid podem enviar dados.",
        "params": {
          "hash": "O hash da microgrid.",
          "kWh": "A quantidade de energia gerada em kWh."
        }
      },
      "switchIfNeeded()": {
        "details": "Se nenhuma microgrid adequada for encontrada, o nó é desativado."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getMicrogridInfo(bytes32)": {
        "notice": "Retorna informações detalhadas sobre uma microgrid específica."
      },
      "latestSensor(bytes32)": {
        "notice": "Retorna o registro mais recente de um sensor de uma microgrid."
      },
      "listMicrogrids()": {
        "notice": "Retorna uma lista com os hashes de todas as microgrids registradas."
      },
      "microgridsByLocation(string,string)": {
        "notice": "Retorna uma lista de microgrids ativas em uma determinada localização."
      },
      "registerMicrogrid(address,uint256,string,string)": {
        "notice": "Registra uma nova microgrid no sistema."
      },
      "registerNode(bytes32,string,string,uint256)": {
        "notice": "Registra um novo nó consumidor de energia."
      },
      "submitSensorData(bytes32,uint256)": {
        "notice": "Envia dados de geração de energia de um sensor."
      },
      "switchIfNeeded()": {
        "notice": "Verifica a energia da microgrid atual e, se abaixo de um limiar, troca para a melhor disponível na mesma cidade."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 254,
        "contract": "contracts/Sunest.sol:Sunest",
        "label": "poe",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ProofOfExistence)242"
      },
      {
        "astId": 290,
        "contract": "contracts/Sunest.sol:Sunest",
        "label": "microgridByHash",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Microgrid)267_storage)"
      },
      {
        "astId": 296,
        "contract": "contracts/Sunest.sol:Sunest",
        "label": "sensorHistory",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_array(t_struct(SensorRecord)272_storage)dyn_storage)"
      },
      {
        "astId": 301,
        "contract": "contracts/Sunest.sol:Sunest",
        "label": "nodeByOperator",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Node)285_storage)"
      },
      {
        "astId": 304,
        "contract": "contracts/Sunest.sol:Sunest",
        "label": "allMicrogridHashes",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 307,
        "contract": "contracts/Sunest.sol:Sunest",
        "label": "allNodeOperators",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 312,
        "contract": "contracts/Sunest.sol:Sunest",
        "label": "microgridsByLocationHash",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SensorRecord)272_storage)dyn_storage": {
        "base": "t_struct(SensorRecord)272_storage",
        "encoding": "dynamic_array",
        "label": "struct Sunest.SensorRecord[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ProofOfExistence)242": {
        "encoding": "inplace",
        "label": "contract ProofOfExistence",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Node)285_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Sunest.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)285_storage"
      },
      "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_array(t_struct(SensorRecord)272_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Sunest.SensorRecord[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(SensorRecord)272_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(Microgrid)267_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Sunest.Microgrid)",
        "numberOfBytes": "32",
        "value": "t_struct(Microgrid)267_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Microgrid)267_storage": {
        "encoding": "inplace",
        "label": "struct Sunest.Microgrid",
        "members": [
          {
            "astId": 256,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "walletMetamask",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 258,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "energyPricePerOp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 260,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "country",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 262,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "city",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 264,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "isActive",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 266,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "owner",
            "offset": 1,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Node)285_storage": {
        "encoding": "inplace",
        "label": "struct Sunest.Node",
        "members": [
          {
            "astId": 274,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "operator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 276,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "currentMicrogridHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 278,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "isActive",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 280,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "country",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 282,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "city",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 284,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "storedGB",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(SensorRecord)272_storage": {
        "encoding": "inplace",
        "label": "struct Sunest.SensorRecord",
        "members": [
          {
            "astId": 269,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "kWh",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 271,
            "contract": "contracts/Sunest.sol:Sunest",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}